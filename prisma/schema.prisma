
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  role        String   @default("Customer") // Roles: Admin, StoreOwner, Customer
  stores      Store[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Customer {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  phone       String?
  address     String?
  storeId     Int 
  store       Store @relation(fields: [storeId], references: [id])
  orders      Order[]   
  password     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Order {
  id            Int          @id @default(autoincrement())
  storeId       Int
  store         Store        @relation(fields: [storeId], references: [id])
  customerId  Int?         // Add a relation to Customer
  customer    Customer?    @relation(fields: [customerId], references: [id])
  orderItems    OrderItem[]
  totalPrice    Float
  orderStatus   String       @default("Pending") // Add this field
  shippingAddress String 
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id])
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  details     Json
  price       Float
}

model Store {
  id          Int          @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  name        String
  domain      String       @unique
  currency    String       @default("USD")
  description String?
  products    Product[]    
  orders      Order[]      
  categories  Category[]
  customers   Customer[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  storeId     Int
  store       Store     @relation(fields: [storeId], references: [id])
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  basePrice      Float          @default(0) // Base price (can be overridden by variants)
  stock       Int         @default(0)
  storeId     Int
  store       Store       @relation(fields: [storeId], references: [id])
  categoryId  Int?
  category    Category?   @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[] 
  variants       Variant[]     // Associated product variants
  attributes     Attribute[]   // Product attributes
  media          Media[]       // Associated media
  customFields   Json?         // Custom metadata in JSON format
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Variant {
  id          Int          @id @default(autoincrement())
  productId   Int
  product     Product      @relation(fields: [productId], references: [id])
  name        String        // Variant name (e.g., "Small", "Red")
  price       Float         // Price specific to the variant
  stock       Int           @default(0) // Variant-specific stock
  attributes  Json          // JSON field for variant-specific attributes (e.g., {"size": "M", "color": "Red"})
  sku         String?       @unique // SKU for inventory tracking
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Attribute {
  id          Int          @id @default(autoincrement())
  productId   Int
  product     Product      @relation(fields: [productId], references: [id])
  key         String        // Attribute key (e.g., "Material", "Dimensions")
  value       String        // Attribute value (e.g., "Cotton", "10x10x10 cm")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Media {
  id          Int          @id @default(autoincrement())
  productId   Int
  product     Product      @relation(fields: [productId], references: [id])
  url         String        // Media URL
  type        String        // Media type (e.g., "image", "video", "document")
  altText     String?       // Alternative text for accessibility
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}
